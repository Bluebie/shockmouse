// Generated by CoffeeScript 1.8.0
var Controller, child_process, cliclick, controller, devices, ds4, events, hid, hidDevice, isBluetoothHID, isDS4HID, isUSBHID, offset, previous_data, touches, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('./node_modules/ds4/node_modules/lodash');

hid = require('./node_modules/ds4/node_modules/node-hid');

ds4 = require('./node_modules/ds4');

child_process = require('child_process');

events = require('events');

isDS4HID = function(descriptor) {
  return descriptor.vendorId === 1356 && descriptor.productId === 1476;
};

isBluetoothHID = function(descriptor) {
  return descriptor.path.match(/^Bluetooth/);
};

isUSBHID = function(descriptor) {
  return descriptor.path.match(/^USB/);
};

console.log("started");

devices = hid.devices();

console.log("devices: " + devices);

controller = _(devices).filter(isDS4HID).first();

if (controller) {
  console.log("got controller");
}

if (!controller) {
  throw new Error('Could not find desired controller.');
}

hidDevice = new hid.HID(controller.path);

console.log("got hid device for controlle");

offset = 0;

if (isBluetoothHID(controller)) {
  offset = 2;
  hidDevice.getFeatureReport(0x04, 66);
}

console.log("Spawning mousing servant (cliclick)");

cliclick = child_process.spawn("" + __dirname + "/bin/cliclick", ['-f', '-']);

console.log("Beginning parsing stream");

touches = [];

previous_data = {};

hidDevice.on('data', function(buf) {
  var data, fire, idx, makeTouchObj, old_touch, touch, _i, _len, _ref;
  data = ds4.parseDS4HIDData(buf.slice(offset));
  touches = [];
  makeTouchObj = function(info, idx) {
    return {
      x: info["trackPadTouch" + idx + "X"],
      y: info["trackPadTouch" + idx + "Y"],
      active: info["trackPadTouch" + idx + "Active"],
      id: info["trackPadTouch" + idx + "Id"]
    };
  };
  fire = function(name, data) {
    return console.log("" + name + ":", data);
  };
  _ref = [0, 1];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    idx = _ref[_i];
    old_touch = makeTouchObj(previous_data, idx);
    touch = makeTouchObj(data, idx);
    if (old_touch.id !== touch.id && touch.active) {
      fire('touchstart', touch);
    }
    if (old_touch.active && !touch.active) {
      fire('touchend', touch);
    }
    if ((old_touch.x !== touch.x || old_touch.y !== old_touch.y) && old_touch.active && touch.active) {
      fire('touchmove', touch);
    }
  }
  return previous_data = data;
});

Controller = (function(_super) {
  __extends(Controller, _super);

  function Controller() {
    return Controller.__super__.constructor.apply(this, arguments);
  }

  Controller.prototype.contructor = function(device_descriptor) {
    this.hid = new hid.HID(device_descriptor.path);
    console.log("got hid device for controlle");
    this.wireless = isBluetoothHID(device_descriptor);
    if (this.wireless) {
      this.hid.getFeatureReport(0x04, 66);
    }
    this.report = {};
    this.timestamp = new Date;
    return this.hid.on('data', (function(_this) {
      return function(buf) {
        var data, _ref;
        data = ds4.parseDS4HIDData(buf.slice((_ref = _this.wireless) != null ? _ref : {
          2: 0
        }));
        return _this._update(data);
      };
    })(this));
  };

  Controller.prototype._update = function(data) {
    this.timestamp = new Date;
    return this.report = data;
  };

  return Controller;

})(events.EventEmitter);

exports.Controller = Controller;

//# sourceMappingURL=controller.js.map
