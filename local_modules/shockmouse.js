// Generated by CoffeeScript 1.8.0
var Gamepad, NextEvent, button_down, gamepads, gamey, key_repeat_initial_delay, key_repeat_interval, map_keyboard, mouse_gain, natural_scrolling, stick, svg, tap_click_duration, _i, _len, _ref;

Gamepad = require('./local_modules/sony_controller').Gamepad;

NextEvent = require('./local_modules/next_event');

gamepads = Gamepad.devices();

console.log("gamepads:", gamepads);

console.log("connecting to first...");

gamey = new Gamepad(gamepads[0]);

console.log("connected!");

console.log("it is wireless?", gamey.wireless);

natural_scrolling = NextEvent.defaults('com.apple.swipescrolldirection') === 1;

gamey.set({
  led: 'blue'
});

gamey.ratelimit = 60;

mouse_gain = function(x) {
  return x * Math.abs(((1 / (1 + (Math.pow(Math.E, -x)))) - 0.5) * 2);
};

tap_click_duration = 200;

gamey.on("touchstart", function(touches) {
  var position;
  position = NextEvent.mouse();
  touch.on('touchmove', function() {
    if (gamey.trackpad.touches.length === 1) {
      position.x += mouse_gain(touch.delta.x);
      position.y += mouse_gain(touch.delta.y);
      if (position.x < 0) {
        position.x = 0;
      }
      if (position.y < 0) {
        position.y = 0;
      }
      return NextEvent[gamey.report.trackPadButton ? 'mouse_drag' : 'mouse_move'](Math.round(position.x), Math.round(position.y));
    } else {
      return NextEvent.mouse_scroll_wheel(Math.round(mouse_gain(touch.delta.x)), Math.round(mouse_gain(natural_scrolling ? -touch.delta.y : touch.delta.y)));
    }
  });
  return touch.on('touchend', function() {
    if (new Date - touch.created < tap_click_duration) {
      position = NextEvent.mouse();
      return NextEvent.mouse_click(position.x, position.y, 'left');
    }
  });
});

button_down = null;

gamey.on("trackpadButton", function() {
  var position;
  button_down = gamey.trackpad.touches.length === 2 ? 'right' : 'left';
  position = NextEvent.mouse();
  return NextEvent.mouse_down(position.x, position.y, button_down);
});

gamey.on("trackpadButtonRelease", function() {
  var position;
  position = NextEvent.mouse();
  return NextEvent.mouse_up(position.x, position.y, button_down);
});

key_repeat_interval = (1000 / 60) * (NextEvent.defaults('KeyRepeat') || 6);

key_repeat_initial_delay = (1000 / 60) * (NextEvent.defaults('InitialKeyRepeat') || 68);

map_keyboard = function(gamepad, keycode) {
  var key_repeater;
  key_repeater = null;
  gamey.on(gamepad, function() {
    NextEvent.key_down(keycode);
    clearInterval(key_repeater);
    return key_repeater = setTimeout((function() {
      return key_repeater = setInterval((function() {
        return NextEvent.key_down(keycode);
      }), key_repeat_interval);
    }), key_repeat_initial_delay);
  });
  return gamey.on("" + gamepad + "Release", function() {
    clearInterval(key_repeater);
    return NextEvent.key_up(keycode);
  });
};

map_keyboard('up', 'UpArrow');

map_keyboard('down', 'DownArrow');

map_keyboard('left', 'LeftArrow');

map_keyboard('right', 'RightArrow');

map_keyboard('cross', 'Return');

map_keyboard('circle', 'Escape');

svg = function(x) {
  var doc;
  doc = document.getElementById('gamepad_graphic').getSVGDocument();
  if (doc) {
    return doc.getElementById(x);
  }
};

gamey.on("keydown", function(key) {
  var element;
  element = svg("DS4_" + key);
  if (element) {
    return element.style.fill = 'red';
  }
});

gamey.on("keyup", function(key) {
  var element;
  element = svg("DS4_" + key);
  if (element) {
    return element.style.fill = '';
  }
});

_ref = ['leftAnalog', 'rightAnalog'];
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  stick = _ref[_i];
  gamey.on("change", function(changes) {
    var element, property, value, _results;
    _results = [];
    for (property in changes) {
      value = changes[property];
      if (property.match(/Analog/)) {
        if (element = svg("DS4_" + property)) {
          _results.push(element.transform.baseVal.getItem(0).setTranslate(value.x * 20, value.y * 20));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });
}

//# sourceMappingURL=shockmouse.js.map
