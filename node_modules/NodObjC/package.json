{
  "name": "NodObjC",
  "description": "The Node.js ⇆ Objective-C bridge",
  "keywords": [
    "obj",
    "objective",
    "c",
    "mac",
    "apple",
    "ios",
    "osx",
    "cocoa",
    "ffi",
    "bridge"
  ],
  "version": "1.0.0",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net",
    "url": "http://tootallnate.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/NodObjC.git"
  },
  "main": "./lib/index.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "debug": "*",
    "ffi": "~1.2.7",
    "ref": "~0.3.2",
    "ref-struct": "0.0.6"
  },
  "devDependencies": {
    "libxmljs": "~0.7.1",
    "dox": "0.3.x",
    "memwatch": "*",
    "highlight.js": "1",
    "jade": "0.25.x",
    "marked": "0.2.x"
  },
  "contributors": [
    {
      "name": "Nathan Rajlich",
      "email": "nathan@tootallnate.net"
    },
    {
      "name": "Trevor Linton",
      "email": "trevor.linton@gmail.com"
    }
  ],
  "readme": "NodObjC\n=======\n### The [Node.js][] ⇆ [Objective-C][ObjCWikipedia] bridge\n[![Build Status](https://travis-ci.org/TooTallNate/NodObjC.svg?branch=master)](https://travis-ci.org/TooTallNate/NodObjC)\n\n\n`NodObjC` exposes the Objective-C runtime to [Node.js][] in a high-level, easy\nto use fashion. It uses the `BridgeSupport` files to dynamically generate an\nAPI from an Objective-C \"Framework\", and uses `node-ffi` to dynamically interact\nwith the Objective-C runtime.\n\nEssentially, `NodObjC` is similar in nature to the other popular Objective-C\nscripting bridges:\n\n * [JSCocoa][]\n * [PyObjC][]\n * [MacRuby][]\n * [And the others…][others]\n\nSo you can write entire Cocoa or iOS GUI applications entirely in Node.js\nJavaScript! Applications are interpreted at runtime through the V8 engine,\nrather than compiled to a machine exectuable. This has the advantage of being\nable to tweak code without having to recompile; excellent for rapid prototyping\nand development, or for those GUI applications where absolute speed is not a\nrequirement (i.e. _most_). So what are you waiting for? Get to coding!\n\n\nInstallation\n------------\n\nInstall using `npm`, of course!\n\n``` bash\n$ npm install NodObjC\n```\n\nOr add it to the `\"dependencies\"` section of your _package.json_ file.\n\n\nHello World\n-----------\n\n``` javascript\nvar $ = require('NodObjC')\n\n// First you import the \"Foundation\" framework\n$.framework('Foundation')\n\n// Setup the recommended NSAutoreleasePool instance\nvar pool = $.NSAutoreleasePool('alloc')('init')\n\n// NSStrings and JavaScript Strings are distinct objects, you must create an\n// NSString from a JS String when an Objective-C class method requires one.\nvar string = $.NSString('stringWithUTF8String', 'Hello Objective-C World!')\n\n// Print out the contents (toString() ends up calling [string description])\nconsole.log(string)\n//   → Prints \"Hello Objective-C World!\"\n\npool('drain')\n```\n\nBe sure to check out the [full API docs][docs].\n\n\nIntroduction\n------------\n\nThis module offers a bi-directional bridge between Node.js and the Objective-C\nruntime. What does that mean exactly? Well due to the design of the Objective-C\nruntime, it is possible to _port_ the entire API to other languages. There are\nquite a few bridges for Obj-C so one for node was a necessity.\n\nSo with this module, you get access to _all_ of the Objective-C APIs, but you\ninvoke them through JavaScript. Obj-C has a concept of \"message passing\" to\ninvoke methods on objects. The way that you pass messages around is probably a\nlittle bit different than the kind of JavaScript you're used to:\n\n``` javascript\n// In JavaScript, you invoke a function on an object like:\nobj.func(arg)\n```\n\nCompared to:\n\n``` javascript\n// In NodObjC, you send a message to an object like:\nobj('func', arg)\n```\n\nIn Objective-C, the names of methods are part of the arguments that you pass\nalong:\n\n``` objective-c\n[array insertObject: obj\n       atIndex: 5]\n```\n\nThe equivalent of the above message invocation in NodObjC syntax would be:\n\n``` javascript\narray('insertObject', obj,\n      'atIndex', 5)\n```\n\nSo the even numbered arguments are the parts of the method name that will be\ninvoked, and the odd numbered arguments are the Obj-C arguments themselves. In\nthe above example, the `insertObject:atIndex:` function will be invoked.\n\nIn `NodObjC`, not only is the Objective-C runtime exposed, but so are the\ncorresponding C functions that usually go along with these APIs (thanks to\nBridgeSupport). So for example, we can make an `NSRect` by calling the\n`NSMakeRect()` C function:\n\n``` javascript\n$.NSMakeRect(5, 10, 8, 30)\n// -> NSRect struct\n```\n\nThere's a plethora of other Objective-C resources and tutorials out there.\n\nYou should definitely have Apple's official [Mac][MacDev] or [iOS][iOSDev] API\ndocs handy at all times.\n\nSupport / Getting Involved\n---------------------------\n\nIf you're looking for support for developing with/for `NodObjC` you might want\nto join the [mailing list][group], and check out the [#nodobjc][IRC] channel\nin the Freenode IRC server.\n\nAdditional topics of discussion can be found on the [Wiki][] page.\n\n\n[docs]: http://tootallnate.github.io/NodObjC\n[group]: https://groups.google.com/d/forum/nodobjc\n[Node.js]: http://nodejs.org\n[JSCocoa]: http://inexdo.com/JSCocoa\n[PyObjC]: http://pyobjc.sourceforge.net\n[MacRuby]: http://macruby.org\n[IRC]: http://webchat.freenode.net/?channels=nodobjc\n[Wiki]: https://github.com/TooTallNate/NodObjC/wiki\n[MacDev]: http://developer.apple.com/library/mac/navigation/\n[iOSDev]: http://developer.apple.com/library/ios/navigation/\n[ObjCWikipedia]: http://en.wikipedia.org/wiki/Objective-C\n[others]: http://cocoadev.com/CocoaBridges\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TooTallNate/NodObjC/issues"
  },
  "homepage": "https://github.com/TooTallNate/NodObjC",
  "_id": "NodObjC@1.0.0",
  "dist": {
    "shasum": "c555cae2a1a834bb33a9a92193a40a367babb301"
  },
  "_from": "NodObjC@",
  "_resolved": "https://registry.npmjs.org/NodObjC/-/NodObjC-1.0.0.tgz"
}
